{"version":3,"sources":["components/FileItem.tsx","store/code/actions.ts","store/git-file/reducers.ts","store/code/reducers.ts","store/index.ts","store/git-file/type.ts","layouts/Sider.tsx","store/git-file/actions.ts","components/CodeArea.tsx","layouts/Content.tsx","App.tsx","serviceWorker.ts","index.tsx","store/code/type.ts"],"names":["FileItem","props","dispatch","useDispatch","href","className","onClick","e","preventDefault","Axios","get","fileInfo","url","then","data","setCode","content","Buffer","from","encoding","toString","name","catch","err","alert","console","log","slice","code","type","SET_CODE","initialState","gitFileList","showedFilesNum","editing","rootReducer","combineReducers","gitFileState","state","action","list","sort","a","b","parseInt","num","codeState","useTypedSelector","useSelector","Sider","map","gitFileInfo","key","CodeArea","useEffect","document","querySelectorAll","forEach","block","hljs","highlightBlock","split","line","index","join","Content","App","pop","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c526e7dc.chunk.js","sourcesContent":["import React from 'react';\nimport Axios from 'axios';\nimport { useDispatch } from 'react-redux';\nimport { GitFileInfo } from '../store/git-file/type';\nimport { setCode } from '../store/code/actions';\nimport './FileItem.css';\n\ninterface Props {\n  fileInfo: GitFileInfo;\n}\n\nconst FileItem: React.FC<Props> = (props) => {\n  const dispatch = useDispatch();\n\n  return <a\n    href=\"showCode\"\n    className=\"FileItem\"\n    onClick={e => {\n      e.preventDefault();\n      Axios\n        .get(props.fileInfo.url)\n        .then(({data}) => {\n          dispatch(setCode({\n            content: Buffer.from(data.content, data.encoding).toString(),\n            url: props.fileInfo.url,\n            name: props.fileInfo.name,\n          }));\n        })\n        .catch(err => {\n          alert('Github refuse to give the file, retry again later.');\n          console.log(err);\n        });\n    }}\n  >\n    {/* remove '.js' */}\n    {props.fileInfo.name.slice(0, -3)}\n  </a>;\n}\n\nexport default FileItem;\n","import {\n  Code,\n  SET_CODE,\n  CodeActionTypes,\n} from './type';\n\nexport const setCode = (code : Code): CodeActionTypes => {\n  return {\n    type: SET_CODE,\n    code,\n  };\n};\n","import {\n  GitFileState,\n  SET_FILE_LIST,\n  SET_SHOWED_FILES_NUM,\n  GitFileActionTypes,\n} from './type';\n\nconst initialState: GitFileState = {\n  gitFileList: [],\n  showedFilesNum: 10,\n};\n\nexport const gitFileReducer = (\n  state = initialState,\n  action: GitFileActionTypes\n): GitFileState => {\n  switch (action.type) {\n    case SET_FILE_LIST:\n      let { list } = action;\n      list.sort((a, b) => parseInt(a.name) - parseInt(b.name));\n      return {\n        ...state,\n        gitFileList: list,\n      };\n    case SET_SHOWED_FILES_NUM:\n      return {\n        ...state,\n        showedFilesNum: action.num,\n      };\n    default:\n      return state;\n  }\n};\n","import {\n  CodeState,\n  SET_CODE,\n  CodeActionTypes,\n} from './type';\n\nconst initialState: CodeState = {\n  code: {\n    url: '',\n    name: '',\n    content: '',\n  },\n  editing: false,\n};\n\nexport const codeReducer = (\n  state = initialState,\n  action: CodeActionTypes\n): CodeState => {\n  switch (action.type) {\n    case SET_CODE:\n      return {\n        ...state,\n        code: action.code,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { useSelector, TypedUseSelectorHook } from 'react-redux';\n\nimport { gitFileReducer } from './git-file/reducers';\nimport { codeReducer } from './code/reducers';\n\nexport const rootReducer = combineReducers({\n  gitFileState: gitFileReducer,\n  codeState: codeReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","// declare types\nexport interface GitFileInfo {\n  name: string;\n  url: string;\n};\n\nexport interface GitFileState {\n  gitFileList: GitFileInfo[];\n  showedFilesNum: number;\n};\n\n// GitFile actions constants & shape\nexport const SET_FILE_LIST = 'SET_FILE_LIST';\nexport const SET_SHOWED_FILES_NUM = 'SET_SHOWED_FILES_NUM';\n\ninterface SetFileListAction {\n  type: typeof SET_FILE_LIST;\n  list: GitFileInfo[];\n}\n\ninterface SetShowedFilesNumAction {\n  type: typeof SET_SHOWED_FILES_NUM;\n  num: number;\n}\n\nexport type GitFileActionTypes = SetFileListAction | SetShowedFilesNumAction;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTypedSelector } from '../store';\nimport { setShowedFilesNum } from '../store/git-file/actions';\nimport FileItem from '../components/FileItem';\nimport './Sider.css';\n\nconst Sider: React.FC = () => {\n  const gitFileState = useTypedSelector(state => state.gitFileState);\n  const dispatch = useDispatch();\n\n  return <div className=\"Sider\">\n    {\n      gitFileState.gitFileList.slice(0, gitFileState.showedFilesNum)\n      .map(gitFileInfo => <FileItem \n        key={parseInt(gitFileInfo.name)} \n        fileInfo={gitFileInfo}\n      />)\n    }\n    <button onClick={() => dispatch(setShowedFilesNum(gitFileState.showedFilesNum + 10))}>更多</button>\n  </div>\n};\n\nexport default Sider;\n","import {\n  GitFileInfo,\n  SET_FILE_LIST,\n  SET_SHOWED_FILES_NUM,\n  GitFileActionTypes\n} from './type';\n\nexport const setFileList = (list: GitFileInfo[]): GitFileActionTypes => {\n  return {\n    type: SET_FILE_LIST,\n    list,\n  };\n};\n\nexport const setShowedFilesNum = (num: number): GitFileActionTypes => {\n  return {\n    type: SET_SHOWED_FILES_NUM,\n    num,\n  };\n};\n","import React, { useEffect } from 'react';\nimport { useTypedSelector } from '../store';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/dracula.css';\n// import 'highlight.js/styles/solarized-dark.css';\n// import 'highlight.js/styles/tomorrow-night-blue.css';\nimport './CodeArea.css';\n\nconst CodeArea = () => {\n  const codeState = useTypedSelector(state => state.codeState);\n\n  useEffect(() => {\n    document.querySelectorAll('pre code').forEach(block => {\n      hljs.highlightBlock(block);\n    });\n  });\n  \n  return <div className=\"CodeArea\">\n    {\n      codeState.code.content ?\n      <pre>\n        <code className=\"Indexes\">\n          {codeState.code.content.split('\\n').map((line, index) => index + 1).join('\\n')}\n        </code>\n        <code className=\"CodeLines javascript\">\n          {codeState.code.content}\n        </code>\n      </pre> :\n      null\n    }\n  </div>;\n};\n\nexport default CodeArea;\n","import React from 'react';\nimport CodeArea from '../components/CodeArea';\nimport './Content.css';\n\nconst Content = () => {\n\n  return <div className=\"Content\">\n    <CodeArea />\n  </div>\n};\n\nexport default Content;\n","import React, { useEffect } from 'react';\nimport Sider from './layouts/Sider';\nimport Content from './layouts/Content';\nimport Axios from 'axios';\nimport './App.css';\nimport { useDispatch } from 'react-redux';\nimport { setFileList} from './store/git-file/actions';\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    Axios\n    .get('https://api.github.com/repos/angryshhh/my-leetcode/contents')\n    .then(({data}) => {\n      data.pop(); // remove README.md\n      dispatch(setFileList(data));\n    })\n    .catch(err => {\n      alert('Github refuse to give the file list, retry again later.');\n      console.log(err);\n    });\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Sider />\n      <Content />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { rootReducer } from './store';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export interface Code {\n  url: string;\n  content: string;\n  name: string;\n}\n\nexport interface CodeState {\n  code: Code;\n  editing: boolean;\n}\n\nexport const SET_CODE = 'SET_CODE';\n\nexport interface SetCodeAction {\n  type: typeof SET_CODE;\n  code: Code;\n}\n\nexport type CodeActionTypes = SetCodeAction;\n"],"sourceRoot":""}